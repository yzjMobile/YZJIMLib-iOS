// Generated by Apple Swift version 4.2 effective-4.1.50 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import PushKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="YZJIMLib",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif






SWIFT_CLASS("_TtC8YZJIMLib17KDDatabaseManager")
@interface KDDatabaseManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLog;)
+ (BOOL)enableLog SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLog:(BOOL)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KDDatabaseManager * _Nonnull shared;)
+ (KDDatabaseManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull openId;
@property (nonatomic, copy) NSString * _Nonnull eId;
- (nonnull instancetype)initWithPath:(NSString * _Nonnull)path OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// 登录账号和初始化时调用，之后再创建表
- (void)loginWithOpenId:(NSString * _Nonnull)openId eId:(NSString * _Nonnull)eId dbPath:(NSString * _Nonnull)dbPath;
/// 退出登录不能再查用户相关数据
- (void)logout;
- (void)databaseRunWithBlock:(void (^ _Nullable)(void))block;
@end


SWIFT_CLASS("_TtC8YZJIMLib11KDLogBridge")
@interface KDLogBridge : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface UIDevice (SWIFT_EXTENSION(YZJIMLib))
+ (BOOL)isPhone SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isPad SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isSimulator SWIFT_WARN_UNUSED_RESULT;
/// 获取当前iphone的model
@property (nonatomic, readonly, copy) NSString * _Nonnull modelName;
@end


@interface UIImage (SWIFT_EXTENSION(YZJIMLib))
+ (UIImage * _Nullable)kd_localizedWithNamed:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(YZJIMLib))
- (UIImage * _Nonnull)yzj_resizeImageWithScale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nonnull)yzj_resizeImageWithTargetSize:(CGSize)targetSize SWIFT_WARN_UNUSED_RESULT;
@end

@class YZJGroup;

SWIFT_PROTOCOL("_TtP8YZJIMLib15YZJAPNSDelegate_")
@protocol YZJAPNSDelegate
/// 点击某个推送过来的群组的操作
- (void)apnsDidReceivePushHandleWithGroup:(YZJGroup * _Nonnull)group;
@end


/// 推送相关
SWIFT_CLASS("_TtC8YZJIMLib14YZJAPNSManager")
@interface YZJAPNSManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class PKPushRegistry;
@class PKPushCredentials;
@class PKPushPayload;

@interface YZJAPNSManager (SWIFT_EXTENSION(YZJIMLib)) <PKPushRegistryDelegate>
- (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didUpdatePushCredentials:(PKPushCredentials * _Nonnull)pushCredentials forType:(PKPushType _Nonnull)type;
- (void)pushRegistry:(PKPushRegistry * _Nonnull)registry didReceiveIncomingPushWithPayload:(PKPushPayload * _Nonnull)payload forType:(PKPushType _Nonnull)type;
@end




SWIFT_CLASS("_TtC8YZJIMLib9YZJConfig")
@interface YZJConfig : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) YZJConfig * _Nonnull shared;)
+ (YZJConfig * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable msgLastReadUpdateTime;
@property (nonatomic, copy) NSString * _Nullable groupExitUpdateTime;
@property (nonatomic, copy) NSString * _Nullable groupListUpdateTime;
@property (nonatomic) BOOL hasTimelineFinishInit;
@property (nonatomic, copy) NSString * _Nullable userId;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable eid;
@property (nonatomic, copy) NSString * _Nullable appId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8YZJIMLib10YZJEmotion")
@interface YZJEmotion : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8YZJIMLib26YZJEventNormalMessageParam")
@interface YZJEventNormalMessageParam : NSObject
@property (nonatomic, copy) NSString * _Nullable eventKey;
@property (nonatomic) id _Nullable eventData;
- (nonnull instancetype)initWithEventKey:(NSString * _Nullable)eventKey eventData:(id _Nullable)eventData OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8YZJIMLib28YZJEventWithdrawMessageParam")
@interface YZJEventWithdrawMessageParam : NSObject
@property (nonatomic, copy) NSString * _Nullable msgId;
@property (nonatomic, copy) NSString * _Nullable msgBy;
@property (nonatomic, copy) NSString * _Nullable originContent;
@property (nonatomic, copy) NSString * _Nullable replyMsgId;
- (nonnull instancetype)initWithMsgId:(NSString * _Nullable)msgId msgBy:(NSString * _Nullable)msgBy originContent:(NSString * _Nullable)originContent replyMsgId:(NSString * _Nullable)replyMsgId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8YZJIMLib7YZJFile")
@interface YZJFile : NSObject
@property (nonatomic, copy) NSString * _Nullable fileId;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic) NSInteger length;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSProgress;

SWIFT_CLASS("_TtC8YZJIMLib17YZJFileDownloader")
@interface YZJFileDownloader : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) YZJFileDownloader * _Nonnull shared;)
+ (YZJFileDownloader * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// [fileid: progress]
@property (nonatomic, copy) NSDictionary<NSString *, NSProgress *> * _Nonnull progressCache;
- (void)downloadFileWithFileId:(NSString * _Nullable)fileId progressBlock:(void (^ _Nullable)(NSProgress * _Nullable))progressBlock downloadPath:(NSString * _Nullable)downloadPath completion:(void (^ _Nullable)(BOOL, NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, YZJFileMessageType, closed) {
  YZJFileMessageTypeFile = 0,
  YZJFileMessageTypeImage = 1,
  YZJFileMessageTypeGif = 2,
  YZJFileMessageTypeVideo = 3,
  YZJFileMessageTypeVoice = 4,
};

enum YZJMessageType : int64_t;

/// YZJMessage = YZJGroupDatabaseType + YZJGroupServerType + 未缓存本地字段
SWIFT_CLASS("_TtC8YZJIMLib8YZJGroup")
@interface YZJGroup : NSObject
- (BOOL)chatAvailable SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable groupId;
@property (nonatomic, copy) NSString * _Nullable groupName;
@property (nonatomic) int64_t unreadCount;
@property (nonatomic, copy) NSString * _Nullable lastMsgId;
@property (nonatomic, copy) NSString * _Nullable headerUrl;
@property (nonatomic, copy) NSString * _Nullable appUpdateTime;
@property (nonatomic, copy) NSString * _Nullable extendUpdateTime;
@property (nonatomic) BOOL fold;
@property (nonatomic, copy) NSString * _Nullable lastMsgSendTime;
@property (nonatomic, copy) NSString * _Nullable param;
@property (nonatomic, copy) NSString * _Nullable participantIds;
@property (nonatomic, copy) NSString * _Nullable managerIds;
@property (nonatomic, copy) NSString * _Nullable updateTime;
@property (nonatomic, copy) NSString * _Nullable updateFlag;
@property (nonatomic) int64_t status;
@property (nonatomic, copy) NSString * _Nullable draft;
@property (nonatomic, copy) NSString * _Nullable sortLastMsgSendTime;
@property (nonatomic, copy) NSString * _Nullable lastCleanTime;
@property (nonatomic) int64_t showInTimeline;
@property (nonatomic, copy) NSString * _Nullable lastMsgDesc;
@property (nonatomic, copy) NSString * _Nullable lastMsgFromUserId;
@property (nonatomic) enum YZJMessageType lastMsgType;
@property (nonatomic, copy) NSString * _Nullable inputStatus;
@property (nonatomic, copy) NSString * _Nullable participantIdsMd5;
@property (nonatomic) NSInteger hasOtherUnread;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface YZJGroup (SWIFT_EXTENSION(YZJIMLib))
/// 是否打开推送
@property (nonatomic, readonly) BOOL pushOpened;
/// 是否置顶
@property (nonatomic, readonly) BOOL isTop;
/// 设置重要群组
@property (nonatomic, readonly) BOOL isImportantGroup;
/// 安全模式是否打开(背景水印)
@property (nonatomic, readonly) BOOL isSafeMode;
/// 是否开启仅管理员添加成员
@property (nonatomic, readonly) BOOL isAddusermark;
/// 全员禁言（是否群组管理员开启禁言）
@property (nonatomic, readonly) BOOL isOpenSilenced;
/// 是否开启仅群管理员修改群名称
@property (nonatomic, readonly) BOOL isOnlyManagerModifyName;
/// 是否开启仅管理员可@所有人
@property (nonatomic, readonly) BOOL memberAtAll;
/// 入群需要管理员同意
@property (nonatomic, readonly) BOOL isAdminAudit;
/// 是否有@提及
@property (nonatomic, readonly) BOOL isNotifyTypeAt;
/// 是否有新公告
@property (nonatomic, readonly) BOOL isNotifyTypeNotice;
/// 是否进群申请
@property (nonatomic, readonly) BOOL isNotifyTypeInvite;
@property (nonatomic, readonly) NSInteger iNotifyType;
@property (nonatomic, readonly, copy) NSString * _Nullable strNotifyDesc;
@property (nonatomic, readonly) BOOL isManager;
@property (nonatomic, readonly, copy) NSString * _Nonnull toUserId;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull participantArray;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull managerIdArray;
@end


SWIFT_PROTOCOL("_TtP8YZJIMLib16YZJGroupDelegate_")
@protocol YZJGroupDelegate
/// 群组列表发生变更（可能是新组，可能是旧组有状态变化）
- (void)groupListDidChangeWithChangedGroups:(NSArray<YZJGroup *> * _Nonnull)changedGroups;
/// 群组拉取加载完成状态变更
- (void)groupListLoadingStateDidChangeWithLoading:(BOOL)loading;
/// 退组通知，用于在消息页面收到该组已退出的处理
- (void)groupDidExitWithGroupId:(NSString * _Nonnull)groupId;
/// 消息的未读数变更，每次应该重新刷新列表
- (void)unreadCountChange;
@end


SWIFT_CLASS("_TtC8YZJIMLib15YZJGroupDynamic")
@interface YZJGroupDynamic : NSObject
@property (nonatomic, copy) NSString * _Nullable personId;
@property (nonatomic, copy) NSString * _Nullable createTime;
@property (nonatomic, copy) NSString * _Nullable sourceId;
@property (nonatomic, copy) NSString * _Nullable params;
@property (nonatomic, copy) NSString * _Nullable groupId;
@property (nonatomic, copy) NSString * _Nullable extendUpdateTime;
@property (nonatomic) NSInteger isFold;
@property (nonatomic) NSInteger deleted;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8YZJIMLib8YZJIMLib")
@interface YZJIMLib : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) YZJIMLib * _Nonnull shared;)
+ (YZJIMLib * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface YZJIMLib (SWIFT_EXTENSION(YZJIMLib))
/// 文件下载
/// \param fileId 文件id
///
/// \param downloadPath 文件下载的存储路径
///
/// \param progressBlock 进度回调，也会通过YZJFileDownloadProgressNotification通知发出
///
/// \param completion 完成回调，true为下载成功，false为下载失败, String为fileId
///
- (void)downloadFileWithFileId:(NSString * _Nullable)fileId progressBlock:(void (^ _Nullable)(NSProgress * _Nullable))progressBlock downloadPath:(NSString * _Nullable)downloadPath completion:(void (^ _Nullable)(BOOL, NSString * _Nullable))completion;
@end

@class UILocalNotification;

@interface YZJIMLib (SWIFT_EXTENSION(YZJIMLib))
/// 需要在点击远程推送回调时调用，如果返回true,会回调delegate的方法，如果返回false，不处理的推送类型，接入方应自行处理
/// func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any])
- (BOOL)handleRemoteNotificationWithUserInfo:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
/// 需要在点击本地推送回调时调用，如果返回true,会回调delegate的方法，如果返回false，不处理的推送类型，接入方应自行处理
/// func application(_ application: UIApplication, didReceive notification: UILocalNotification)
- (BOOL)handleLocalNotificationWithNotification:(UILocalNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
@end

enum YZJMsgListDirection : NSInteger;
@class YZJMessage;
enum YZJNetworkErrorCode : NSInteger;

@interface YZJIMLib (SWIFT_EXTENSION(YZJIMLib))
/// 获取某条消息前后的若干条消息
/// 用于聊天界面的上下分页；返回结果不包含传入的msgId；优先取本地数据，如果没有则取网络数据
/// \param msgId 目标消息id
///
/// \param direction 拉取方向，新或旧
///
/// \param count 拉取的消息数量
///
/// \param groupId 会话组id
///
/// \param toUserId 用户id，没有groupId则传该字段
///
/// \param success 获得到的消息对象集合
///
/// \param error 错误回调
///
- (void)fetchMessageFromMsgId:(NSString * _Nullable)msgId direction:(enum YZJMsgListDirection)direction count:(NSInteger)count groupId:(NSString * _Nullable)groupId toUserId:(NSString * _Nullable)toUserId currentMessages:(NSArray<YZJMessage *> * _Nullable)currentMessages success:(void (^ _Nullable)(NSArray<YZJMessage *> * _Nonnull))success error:(void (^ _Nullable)(enum YZJNetworkErrorCode))error;
/// 同步一个组从某条消息开始到最新一条的所有消息
/// 用于进入聊天界面后保持数据更新；可能需要同步的消息较多，故提供分页调用
/// \param msgId 目标消息id
///
/// \param groupId 会话组id
///
/// \param toUserId 用户id，没有groupId则传该字段
///
/// \param includeSelf 是否包含自己
///
/// \param pageCount 分页拉取每页条数，默认200条
///
/// \param pageCompletion 分页拉取每页回调
///
/// \param success 获得到的整体消息对象集合
///
/// \param error 错误回调
///
- (void)syncGroupFromMsgId:(NSString * _Nullable)msgId groupId:(NSString * _Nullable)groupId toUserId:(NSString * _Nullable)toUserId includeSelf:(BOOL)includeSelf pageCount:(NSInteger)pageCount pageCompletion:(void (^ _Nullable)(NSArray<YZJMessage *> * _Nonnull))pageCompletion currentMessages:(NSArray<YZJMessage *> * _Nullable)currentMessages success:(void (^ _Nullable)(NSArray<YZJMessage *> * _Nonnull))success error:(void (^ _Nullable)(enum YZJNetworkErrorCode))error;
- (void)queryDBLatestMessageWithGroupId:(NSString * _Nullable)groupId toUserId:(NSString * _Nullable)toUserId count:(NSInteger)count success:(void (^ _Nullable)(NSArray<YZJMessage *> * _Nonnull))success error:(void (^ _Nullable)(enum YZJNetworkErrorCode))error;
@end


@interface YZJIMLib (SWIFT_EXTENSION(YZJIMLib))
- (BOOL)withdrawReplaceMsgWithMsgId:(NSString * _Nullable)msgId groupId:(NSString * _Nullable)groupId content:(NSString * _Nullable)content param:(NSString * _Nullable)param SWIFT_WARN_UNUSED_RESULT;
- (void)updateMessageToReadWithGroupId:(NSString * _Nullable)groupId msgId:(NSString * _Nullable)msgId;
- (BOOL)deleteLocalMessageWithMsgId:(NSString * _Nullable)msgId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)updateSendingMessagesToFail SWIFT_WARN_UNUSED_RESULT;
@end

@class YZJLoginConfig;

@interface YZJIMLib (SWIFT_EXTENSION(YZJIMLib))
/// 初始化接口
/// \param appId 通过开发者控制台注册得到的appId
///
- (void)initWithAppId:(NSString * _Nullable)appId SWIFT_METHOD_FAMILY(none);
/// 自动登录接口
/// \param token 从im-server获取的登录令牌
///
/// \param userId 用户id
///
- (void)loginWithToken:(NSString * _Nonnull)token userId:(NSString * _Nonnull)userId;
/// 登录接口
/// \param token 从im-server获取的登录令牌
///
/// \param completion succ 成功标识，userId im用户标识，errorMsg 错误信息
///
- (void)loginWithToken:(NSString * _Nullable)token completion:(void (^ _Nullable)(BOOL, NSString * _Nullable, NSString * _Nullable))completion;
/// 私有化部署配置
/// \param config 私有化部署需要配置项，如baseUrl，mercUrl，fileUrl
///
- (void)setConfig:(YZJLoginConfig * _Nullable)config;
/// 登出接口
/// 数据库关闭、长连接关闭、推送注销等操作
- (void)logout;
@end

@protocol YZJMessageDelegate;
@protocol YZJLoginDelegate;

@interface YZJIMLib (SWIFT_EXTENSION(YZJIMLib))
/// 设置/移除 推送代理
/// \param delegate 通知相关的回调代理
///
/// \param inQueue 代理回调后的队列，默认主线程
///
- (void)setAPNSDelegate:(id <YZJAPNSDelegate> _Nonnull)delegate inQueue:(dispatch_queue_t _Nonnull)inQueue;
- (void)removeAPNSDelegate;
/// 设置/移除 群组代理
/// \param groupDelegate 回调代理
///
/// \param inQueue 代理回调后的队列，默认主线程
///
- (void)setGroupDelegate:(id <YZJGroupDelegate> _Nonnull)groupDelegate inQueue:(dispatch_queue_t _Nullable)inQueue;
- (void)removeGroupDelegate;
/// 设置/移除 消息代理
/// \param groupDelegate 回调代理
///
/// \param inQueue 代理回调后的队列，默认主线程
///
- (void)setMessageDelegate:(id <YZJMessageDelegate> _Nonnull)messageDelegate inQueue:(dispatch_queue_t _Nullable)inQueue;
- (void)removeMessageDelegate;
- (void)setLoginDelegateWithDelegate:(id <YZJLoginDelegate> _Nonnull)delegate inQueue:(dispatch_queue_t _Nonnull)inQueue;
@end

@protocol YZJMessageParam;
enum YZJSendResultState : NSUInteger;

@interface YZJIMLib (SWIFT_EXTENSION(YZJIMLib))
/// <ul>
///   <li>
///     支持的消息发送类型
///     <ul>
///       <li>
///         基础类型：文本、图片、视频、音频、事件、分享、表情、重发
///       </li>
///       <li>
///         扩展功能：回复
///       </li>
///     </ul>
///   </li>
///   <li>
///     基础参数（注：所有消息类型参数都必须带有基础参数；groupId和toUserId二选一即可）
///     <ul>
///       <li>
///         groupId（String）: 群组id
///       </li>
///       <li>
///         toUserId（String）: 消息接收者userId
///       </li>
///       <li>
///         content（String）: 消息文本内容
///       </li>
///     </ul>
///   </li>
///   <li>
///     基础类型
///     <ul>
///       <li>
///         文本消息（YZJTextMessageParam）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 textReplyMessageParam（YZJTextReplyMessageParam）: 可选
///                 <ul>
///                   <li>
///                     Parameters:
///                     <ul>
///                       <li>
///                         replyPersonId（String）: 回复者personId
///                       </li>
///                       <li>
///                         replyPersonName（String）: 回复者personName
///                       </li>
///                       <li>
///                         replyMessage（YZJMessage）: 被回复的消息
///                       </li>
///                     </ul>
///                   </li>
///                 </ul>
///               </li>
///               <li>
///                 textNotifyMessageParam（YZJTextNotifyMessageParam）: 可选
///                 <ul>
///                   <li>
///                     Parameters:
///                     <ul>
///                       <li>
///                         isNotifyAll（Bool）: 是否提及所有人
///                       </li>
///                       <li>
///                         beNotifiedPersonIds（[String]）: 被提及personId数组，isNotifyAll为true是不需要传
///                       </li>
///                     </ul>
///                   </li>
///                 </ul>
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///       <li>
///         图片消息（YZJImageMessageParam）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 image（UIImage）: 静态图
///               </li>
///               <li>
///                 isOriginal（Bool）: 是否原图，发送图片需传参数，发送gif不需传
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///       <li>
///         视频消息（YZJVideoMessageParam；videoURL和videoData二选一即可）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 videoURL（URL）: 视频本地路径
///               </li>
///               <li>
///                 videoData（Data）: 视频数据
///               </li>
///               <li>
///                 thumbnail（UIImage）: 视频封面缩略图
///               </li>
///               <li>
///                 duration（Double）: 视频时长
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///       <li>
///         音频消息（YZJVoiceMessageParam）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 voiceData（Data）: 音频数据
///               </li>
///               <li>
///                 msgLen（Float）
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///       <li>
///         事件消息（YZJEventMessageParam）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 eventNormalMessageParam（YZJEventNormalMessageParam）: 普通事件；可选
///                 <ul>
///                   <li>
///                     Parameters:
///                     <ul>
///                       <li>
///                         eventKey（String）: 事件key
///                       </li>
///                       <li>
///                         eventData（Any）: 事件数据
///                       </li>
///                     </ul>
///                   </li>
///                 </ul>
///               </li>
///               <li>
///                 eventWithdrawMessageParam（YZJEventWithdrawMessageParam）: 撤回消息事件；可选
///                 <ul>
///                   <li>
///                     Parameters:
///                     <ul>
///                       <li>
///                         msgId（String）: 撤回消息id
///                       </li>
///                       <li>
///                         msgBy（String）: 撤回者userId
///                       </li>
///                       <li>
///                         originContent（String）: 原始内容
///                       </li>
///                       <li>
///                         replyMsgId（String）: 如果是回复消息，需把回复消息id传过来
///                       </li>
///                     </ul>
///                   </li>
///                 </ul>
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///       <li>
///         系统表情消息（YZJSystemEmoticonMessageParam）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 emoticonFileId（String）: 表情文件id
///               </li>
///               <li>
///                 emoticonName（String）: 表情名称
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///       <li>
///         普通表情消息（YZJCustomEmoticonMessageParam，暂时只支持gif格式）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 emoticonData（Data）: 表情数据
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///       <li>
///         文件消息（YZJFileMessageParam）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 fileId（String）: 文件id
///               </li>
///               <li>
///                 fileName（String）: 文件名称
///               </li>
///               <li>
///                 fileSize（String）: 文件大小
///               </li>
///               <li>
///                 fileExt（String）: 文件后缀
///               </li>
///               <li>
///                 fileType（YZJFileMessageType）: 文件类型（file、picture、gif、video、voice）
///               </li>
///               <li>
///                 folderId（String）: 文件夹id
///               </li>
///               <li>
///                 folderName（String）: 文件夹名称
///               </li>
///               <li>
///                 paramDict（[String: AnyObject]）: 其他参数
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///       <li>
///         重发消息（YZJResendMessageParam）
///         <ul>
///           <li>
///             Parameters:
///             <ul>
///               <li>
///                 message（YZJMessage）: 需重发的消息
///               </li>
///             </ul>
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
///   <li>
///     消息发送接口
///     <ul>
///       <li>
///         Parameters:
///         <ul>
///           <li>
///             param（YZJMessageParam；必须指定某种消息类型，如YZJTextMessageParam）: 消息参数
///           </li>
///           <li>
///             callback（YZJMessageSendCallback）: 回调
///           </li>
///         </ul>
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)send:(id <YZJMessageParam> _Nonnull)param callback:(void (^ _Nullable)(enum YZJSendResultState, YZJMessage * _Nullable, float, NSError * _Nullable))callback;
- (int64_t)queryMsgUnreadCountWithMsgId:(NSString * _Nonnull)msgId SWIFT_WARN_UNUSED_RESULT;
@end


@interface YZJIMLib (SWIFT_EXTENSION(YZJIMLib))
/// 进某个会话组后设置当前群组groupId，激活消息拉取的代理
/// \param groupId 当前群组的id
///
- (void)setCurrentGroupId:(NSString * _Nullable)groupId;
/// 更新群组会话列表(最好在显示列表前更新一次)
- (void)updateInternalGroups;
/// 获取对应人员的单人组信息
- (YZJGroup * _Nullable)queryDoubleGroupWithPersonId:(NSString * _Nullable)personId SWIFT_WARN_UNUSED_RESULT;
/// 同步从DB中获取会话
/// \param count 需要的数量
///
/// \param offset 用于翻页，不传会取所有的会话，会占用大量时间
///
- (NSArray<YZJGroup *> * _Nonnull)getGroupWithCount:(NSInteger)count offset:(NSInteger)offset SWIFT_WARN_UNUSED_RESULT;
/// 删除会话组
/// \param groupId 会话组id
///
- (void)deleteWithGroupId:(NSString * _Nonnull)groupId completion:(void (^ _Nullable)(void))completion;
/// 退出群组,群组删人，传入对应人员的id
/// \param groupId 会话组id
///
/// \param userIds 用户id数组
///
/// \param completion (errorMsg, participantIds)请求回调，失败返回错误原因String,成功返回nil
///
- (void)exitGroupWithGroupId:(NSString * _Nonnull)groupId userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(NSString * _Nullable, NSString * _Nullable))completion;
/// 解散群组
/// \param groupId 会话组id
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)destroyGroupWithGroupId:(NSString * _Nonnull)groupId completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 创建群组
/// \param groupName 会话组名称
///
/// \param userIds 用户id数组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)creatGroupWithGroupName:(NSString * _Nullable)groupName userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(NSString * _Nullable, YZJGroup * _Nullable))completion;
/// 添加用户
/// \param groupId 会话组id
///
/// \param userIds 用户id数组
///
/// \param completion (errorMsg, participantIds)请求回调，失败返回错误原因String,成功返回nil
///
- (void)addUserOfGroupWithGroupId:(NSString * _Nonnull)groupId userIds:(NSArray<NSString *> * _Nonnull)userIds completion:(void (^ _Nullable)(NSString * _Nullable, NSString * _Nullable))completion;
/// 获取群详情
/// \param groupId 会话组id
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)getGroupInfoWithGroupId:(NSString * _Nonnull)groupId completion:(void (^ _Nullable)(NSString * _Nullable, YZJGroup * _Nullable))completion;
/// 更新群名
/// \param groupId 会话组id
///
/// \param name 新群名
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)updateGroupWithGroupId:(NSString * _Nonnull)groupId name:(NSString * _Nonnull)name completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 标为已读,成功后应该设置group的unreadCount为0并刷新UI
/// \param groupId 会话组id
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)onMarkReadWithGroupId:(NSString * _Nonnull)groupId completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 置顶和取消置顶,成功后应该更新会话列表
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)toggleTopWithGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 免打扰模式(打开/关闭)
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)setNotDisturbModelWithGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 添加管理员
/// \param groupId 会话组id
///
/// \param managerIds 新管理员的用户id
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)addManagerWithGroupId:(NSString * _Nonnull)groupId managerIds:(NSArray<NSString *> * _Nonnull)managerIds completion:(void (^ _Nullable)(NSString * _Nullable, NSString * _Nullable))completion;
/// 移除管理员
/// \param groupId 会话组id
///
/// \param managerIds 要移除的管理员用户id
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)deleteManagerWithGroupId:(NSString * _Nonnull)groupId managerIds:(NSArray<NSString *> * _Nonnull)managerIds completion:(void (^ _Nullable)(NSString * _Nullable, NSString * _Nullable))completion;
/// 清空群消息
/// \param groupId 会话组id
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)deleteAllMessageWithGroupId:(NSString * _Nonnull)groupId completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 设置重要群组(打开/关闭)
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)setImportantGroupWithGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 设置安全模式(打开/关闭)
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)setSafeModelGroupWithGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 是否开启仅管理员添加成员(打开/关闭)
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)setOnlyManagerAddUserWithGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 全员禁言（是否群组管理员开启禁言）(打开/关闭)
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)setBannedTalkWithGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 是否开启仅管理员可@所有人(打开/关闭)
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)setOnlyManagerAtGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 是否开启仅群管理员修改群名称(打开/关闭)
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)setOnlyManagerModifyNameWithGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 入群需要管理员同意(打开/关闭)
/// \param group 会话组
///
/// \param completion 请求回调，失败返回错误原因String,成功返回nil
///
- (void)setAddGroupNeedManagerAgreeWithGroup:(YZJGroup * _Nonnull)group completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// 更新组最新一条消息
/// \param groupId 组id
///
/// \param lastMsgId 最新一条消息id
///
/// \param lastMsgDesc 最新一条消息信息
///
/// \param lastMsgSendTime 最新一条时间
///
/// \param lastMsgStatus 最新一条消息的发送状态
///
- (void)updatePrivateGroupLastMsgInfoWithGroupId:(NSString * _Nullable)groupId lastMsgId:(NSString * _Nullable)lastMsgId lastMsgDesc:(NSString * _Nullable)lastMsgDesc lastMsgSendTime:(NSString * _Nullable)lastMsgSendTime lastMsgStatus:(NSInteger)lastMsgStatus;
@end

@class NSBundle;

SWIFT_CLASS("_TtC8YZJIMLib12YZJLocalized")
@interface YZJLocalized : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATIONNAME_LANGUAGECHANGE;)
+ (NSString * _Nonnull)NOTIFICATIONNAME_LANGUAGECHANGE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACCEPT_LANGUAGE;)
+ (NSString * _Nonnull)ACCEPT_LANGUAGE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHINESE;)
+ (NSString * _Nonnull)CHINESE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ENGLISH;)
+ (NSString * _Nonnull)ENGLISH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AcceptLanguage_CHINESE;)
+ (NSString * _Nonnull)AcceptLanguage_CHINESE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AcceptLanguage_ENGLISH;)
+ (NSString * _Nonnull)AcceptLanguage_ENGLISH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) YZJLocalized * _Nonnull shared;)
+ (YZJLocalized * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nonnull languageStr;
@property (nonatomic, copy) NSString * _Nonnull acceptLanguageStr;
@property (nonatomic, copy) NSString * _Nonnull countryCodeStr;
@property (nonatomic, strong) NSBundle * _Nonnull languageBundle;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// 语言更新的时候调用
- (void)languageChange;
/// <em><em><em><em><em><em><em><em><em><em><em><em><em><em><em><em><em><em>类方法</em></em></em></em></em></em></em></em></em></em></em></em></em></em></em></em></em></em>***********
+ (NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
/// 获取传给服务器的语言文件
+ (NSString * _Nonnull)acceptLanguage SWIFT_WARN_UNUSED_RESULT;
/// 获取当前国家码
+ (NSString * _Nonnull)getCountryCode SWIFT_WARN_UNUSED_RESULT;
/// 获取语言文件bundle
+ (NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
/// 是否随便系统语言
+ (BOOL)isFollowSystem SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCurrentSystemLanguage SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isChinese SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isEnglish SWIFT_WARN_UNUSED_RESULT;
/// 语言切换
+ (void)languageChange;
@end


SWIFT_CLASS("_TtC8YZJIMLib14YZJLoginConfig")
@interface YZJLoginConfig : NSObject
@property (nonatomic, copy) NSString * _Nullable baseUrl;
@property (nonatomic, copy) NSString * _Nullable mercUrlLong;
@property (nonatomic, copy) NSString * _Nullable mercUrlShort;
@property (nonatomic, copy) NSString * _Nullable fileUrl;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP8YZJIMLib16YZJLoginDelegate_")
@protocol YZJLoginDelegate
/// 被踢出登录回调
- (void)didLogoutWithErrorMsg:(NSString * _Nullable)errorMsg;
@end

@class YZJNumber;

/// YZJMessage = YZJMessageDatabaseType + YZJMessageServerType + 未缓存本地字段
SWIFT_CLASS("_TtC8YZJIMLib10YZJMessage")
@interface YZJMessage : NSObject
@property (nonatomic, copy) NSString * _Nullable nickname;
@property (nonatomic, copy) NSString * _Nullable msgId;
@property (nonatomic, copy) NSString * _Nullable fromUserId;
@property (nonatomic, copy) NSString * _Nullable sendTime;
@property (nonatomic, copy) NSString * _Nullable content;
@property (nonatomic, copy) NSString * _Nullable clientMsgId;
@property (nonatomic, copy) NSString * _Nullable groupId;
@property (nonatomic, copy) NSString * _Nullable toUserId;
@property (nonatomic, copy) NSString * _Nullable param;
@property (nonatomic, copy) NSString * _Nullable notifyDesc;
@property (nonatomic, copy) NSString * _Nullable emojiType;
@property (nonatomic, copy) NSString * _Nullable sourceMsgId;
@property (nonatomic, copy) NSString * _Nullable fromClientId;
@property (nonatomic, strong) YZJNumber * _Nullable unreadUserCount;
@property (nonatomic, readonly) enum YZJMessageType messageType;
@property (nonatomic, copy) NSString * _Nullable originalContent;
@property (nonatomic, copy) NSString * _Nullable localClientMsgId;
@property (nonatomic, copy) NSString * _Nullable publicId;
@property (nonatomic, copy) NSString * _Nullable fileId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface YZJMessage (SWIFT_EXTENSION(YZJIMLib))
@property (nonatomic, readonly) BOOL isMention;
@property (nonatomic, readonly) double sendTimeInt;
- (BOOL)isEmoji SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isVideoMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPictureMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isForwardTextMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotFavoriteMessage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)unsupportedMessageType SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP8YZJIMLib18YZJMessageDelegate_")
@protocol YZJMessageDelegate
/// 当前群组发生变更
- (void)groupDidChangeWithGroup:(YZJGroup * _Nonnull)group;
/// 当前群组有新消息
- (void)groupDidReceiveNewMessagesWithGroup:(YZJGroup * _Nonnull)group messages:(NSArray<YZJMessage *> * _Nonnull)messages;
@end

typedef SWIFT_ENUM(int64_t, YZJMessageDirection, closed) {
  YZJMessageDirectionLeft = 0,
  YZJMessageDirectionRight = 1,
};


SWIFT_CLASS("_TtC8YZJIMLib19YZJMessageFileCache")
@interface YZJMessageFileCache : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC8YZJIMLib14YZJMessageList")
@interface YZJMessageList : NSObject
@end


SWIFT_CLASS("_TtC8YZJIMLib17YZJMessageManager")
@interface YZJMessageManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





















typedef SWIFT_ENUM(NSInteger, YZJMessagePagingDirection, closed) {
  YZJMessagePagingDirectionOld = 0,
  YZJMessagePagingDirectionNew = 1,
  YZJMessagePagingDirectionCurrent = 2,
  YZJMessagePagingDirectionMiddle = 3,
};


SWIFT_PROTOCOL("_TtP8YZJIMLib15YZJMessageParam_")
@protocol YZJMessageParam
@property (nonatomic, readonly, copy) NSString * _Nullable groupId;
@property (nonatomic, readonly, copy) NSString * _Nullable toUserId;
@property (nonatomic, readonly, copy) NSString * _Nullable content;
@end

typedef SWIFT_ENUM(NSInteger, YZJMessagePictrueResolutionType, closed) {
  YZJMessagePictrueResolutionTypeThumbnail = 0,
  YZJMessagePictrueResolutionTypeLarge = 1,
  YZJMessagePictrueResolutionTypeOriginal = 2,
};


SWIFT_CLASS("_TtC8YZJIMLib19YZJMessageReadState")
@interface YZJMessageReadState : NSObject
- (NSDictionary<NSString *, NSString *> * _Nonnull)messageUnreadStatusDict SWIFT_WARN_UNUSED_RESULT;
+ (YZJMessageReadState * _Nonnull)tableObjectWithMsgId:(NSString * _Nonnull)msgId groupId:(NSString * _Nonnull)groupId unreadCount:(NSInteger)unreadCount SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(int64_t, YZJMessageReadStatus, closed) {
  YZJMessageReadStatusUnread = 0,
  YZJMessageReadStatusRead = 1,
};

typedef SWIFT_ENUM(int64_t, YZJMessageRequestState, closed) {
  YZJMessageRequestStateSuccess = 0,
  YZJMessageRequestStateRequesting = 1,
  YZJMessageRequestStateFail = 2,
  YZJMessageRequestStatePartialSuccess = 3,
};

typedef SWIFT_ENUM(int64_t, YZJMessageType, closed) {
  YZJMessageTypeNone = -1,
  YZJMessageTypeSystem = 0,
  YZJMessageTypeText = 1,
  YZJMessageTypeImage = 2,
  YZJMessageTypeEmoticon = 3,
  YZJMessageTypeVideo = 4,
  YZJMessageTypeVoice = 5,
  YZJMessageTypeFile = 6,
  YZJMessageTypeEvent = 7,
};

typedef SWIFT_ENUM(NSInteger, YZJMsgListDirection, closed) {
  YZJMsgListDirectionOld = 0,
  YZJMsgListDirectionNew = 1,
  YZJMsgListDirectionNewIncludeSelf = 2,
};

typedef SWIFT_ENUM(NSInteger, YZJNetworkErrorCode, closed) {
  YZJNetworkErrorCodeFail = 0,
};


SWIFT_CLASS("_TtC8YZJIMLib9YZJNumber")
@interface YZJNumber : NSObject
@property (nonatomic, readonly) double doubleValue;
@property (nonatomic, readonly) int64_t int64Value;
@property (nonatomic, readonly) BOOL boolValue;
- (nonnull instancetype)initWithDoubleValue:(double)doubleValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIntValue:(int64_t)intValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBoolValue:(BOOL)boolValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8YZJIMLib16YZJRecallManager")
@interface YZJRecallManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) YZJRecallManager * _Nonnull shared;)
+ (YZJRecallManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull paramType;
@property (nonatomic, readonly, copy) NSString * _Nonnull replace;
@property (nonatomic, readonly, copy, getter=delete) NSString * _Nonnull delete_;
@property (nonatomic, readonly) NSTimeInterval canWithdrawDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM(NSInteger, YZJRedEnvelopeType, closed) {
  YZJRedEnvelopeTypeNormal = 0,
  YZJRedEnvelopeTypeExclusive = 1,
  YZJRedEnvelopeTypeReward = 2,
};


SWIFT_CLASS("_TtC8YZJIMLib18YZJSearchCondition")
@interface YZJSearchCondition : NSObject
/// 是否搜索离职人员的单人群组
@property (nonatomic) BOOL needDeparturePerson;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum YZJSearchType : NSInteger;

SWIFT_CLASS("_TtC8YZJIMLib13YZJSearchData")
@interface YZJSearchData : NSObject
@property (nonatomic, copy) NSString * _Nullable keywords;
@property (nonatomic) enum YZJSearchType type;
@property (nonatomic) BOOL hasMore;
/// 是否正在请求
@property (nonatomic) BOOL requesting;
@property (nonatomic) NSInteger page;
@property (nonatomic, copy) NSArray * _Nullable datas;
- (void)setDefaultValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class YZJSearchResult;

SWIFT_CLASS("_TtC8YZJIMLib16YZJSearchManager")
@interface YZJSearchManager : NSObject
@property (nonatomic, strong) YZJSearchCondition * _Nonnull condition;
/// 单个搜索方法，第一页
- (void)searchWithType:(enum YZJSearchType)type keywords:(NSString * _Nullable)keywords page:(NSInteger)page count:(NSInteger)count completion:(void (^ _Nullable)(YZJSearchResult * _Nonnull))completion;
/// 搜索下一页内容
- (void)loadMoreWithType:(enum YZJSearchType)type keywords:(NSString * _Nullable)keywords count:(NSInteger)count completion:(void (^ _Nullable)(YZJSearchResult * _Nonnull))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8YZJIMLib15YZJSearchResult")
@interface YZJSearchResult : NSObject
@property (nonatomic) BOOL success;
@property (nonatomic) BOOL hasMore;
@property (nonatomic, copy) NSString * _Nullable error;
@property (nonatomic, copy) NSArray * _Nullable datas;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, YZJSearchType, closed) {
  YZJSearchTypeGroup = 1,
  YZJSearchTypeMessage = 2,
};


SWIFT_CLASS("_TtC8YZJIMLib13YZJSendResult")
@interface YZJSendResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSUInteger, YZJSendResultState, closed) {
  YZJSendResultStateInitial = 0,
  YZJSendResultStateBeforeUpload = 1,
  YZJSendResultStatePending = 2,
  YZJSendResultStateReady = 3,
  YZJSendResultStateSuccess = 4,
  YZJSendResultStateFail = 5,
};

typedef SWIFT_ENUM(int64_t, YZJTextBodyType, closed) {
  YZJTextBodyTypeNone = 0,
  YZJTextBodyTypeForwardText = 1,
  YZJTextBodyTypeReplyText = 2,
  YZJTextBodyTypeReplyImage = 3,
  YZJTextBodyTypeReplyLink = 4,
};


SWIFT_CLASS("_TtC8YZJIMLib25YZJTextNotifyMessageParam")
@interface YZJTextNotifyMessageParam : NSObject
@property (nonatomic) BOOL isNotifyAll;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable beNotifiedPersonIds;
- (nonnull instancetype)initWithIsNotifyAll:(BOOL)isNotifyAll beNotifiedPersonIds:(NSArray<NSString *> * _Nullable)beNotifiedPersonIds OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8YZJIMLib24YZJTextReplyMessageParam")
@interface YZJTextReplyMessageParam : NSObject
@property (nonatomic, copy) NSString * _Nullable replyPersonId;
@property (nonatomic, copy) NSString * _Nullable replyPersonName;
@property (nonatomic, strong) YZJMessage * _Nullable replyMessage;
- (nonnull instancetype)initWithReplyPersonId:(NSString * _Nullable)replyPersonId replyPersonName:(NSString * _Nullable)replyPersonName replyMessage:(YZJMessage * _Nullable)replyMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
